<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ros2</title>
      <link href="/ros2/"/>
      <url>/ros2/</url>
      
        <content type="html"><![CDATA[<h1><span id="ros2教程">ros2教程</span></h1><h3><span id="视频教程鱼香ros">视频教程：鱼香ros</span></h3><p><a href="https://www.bilibili.com/video/BV1gr4y1Q7j5/?spm_id_from=333.337.search-card.all.click&vd_source=91aba6d20c3e8f66bdd946d639e31d4b">Bilibili链接</a></p><iframe src="https://player.bilibili.com/player.html?bvid=BV1gr4y1Q7j5&page=1&as_wide=1&high_quality=1&danmaku=1" style="width: 62em; height: 35em;" allowfullscreen="allowfullscreen" width="100%" height="100%" scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts"></iframe><h3><span id="对应文档">对应文档：</span></h3><p><a href="https://fishros.com/d2lros2/#/">鱼香ros2</a>：<a href="https://fishros.com/d2lros2/#/">https://fishros.com/d2lros2/#/</a></p><h1><span id="一些奇怪的问题">一些奇怪的问题</span></h1><p><a href="https://blog.csdn.net/littleRpl/article/details/92626436">swap空间不足导致报错</a></p><p><a href="https://blog.csdn.net/donaldsy/article/details/107482368">彻底解决【“curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused”】错误</a></p><p><a href="https://getiot.tech/zh/ros2/ros2-debug/">ROS2 调试方法</a></p><p><a href="https://candy-tuberose-668.notion.site/b844421402164673ae1603fcbf46c09e?pvs=4">ros2自启动脚本</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GDB_ros2</title>
      <link href="/GDB-ros2/"/>
      <url>/GDB-ros2/</url>
      
        <content type="html"><![CDATA[<h1><span id="用gdb运行ros2程序">用GDB运行ros2程序</span></h1><p>1.安装依赖</p><p>本教程参考  <a href="https://getiot.tech/zh/ros2/ros2-debug/">GDB-ros2</a></p><p>这里使用 <strong><a href="https://github.com/pal-robotics/backward_ros">backward_ros</a></strong> 软件包，它是对 <a href="https://github.com/bombela/backward-cpp">backward-cpp</a> 包的 ROS2 封装，可以简单快速地使用 GDB 工具调试 ROS2 程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt install ros-humble-backward-ros<br></code></pre></td></tr></table></figure><p>然后在编译 ROS2 程序时，添加 <code>CMAKE_BUILD_TYPE</code> 编译类型选项参数，可以选择 <code>RelWithDebInfo</code>、<code>Debug</code> 或 <code>Release</code>。对应 CMake 的三种编译选项，其中 <code>Release</code> 模式主要用于发布代码，会忽略调试信息；<code>Debug</code> 模式主要用于调试代码，因为需要生成调试信息，所以时间较长；<code>RelWithDebInfo</code> 则在 <code>Release</code> 模式下生成调试信息，也可以用于调试代码。通常建议使用 <code>RelWithDebInfo</code> 即可。</p><p>colcon 编译命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">colcon build --cmake-args <span class="hljs-string">&#x27;-DCMAKE_BUILD_TYPE=RelWithDebInfo&#x27;</span><br></code></pre></td></tr></table></figure><p>这里的引号不是必须的，因此也可以写成这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">colcon build --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo<br></code></pre></td></tr></table></figure><p>colcon 支持 <code>--symlink-install</code> 选项，作用是工作空间（source）中的文件发生变化时，安装目录（build）的文件也会随着改变。这样在调试的时候会高效一些，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo<br></code></pre></td></tr></table></figure><p>在package.xml里面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;depend&gt;backward_ros&lt;/depend&gt;<br></code></pre></td></tr></table></figure><p>在CMakeLists.txt里面添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">find_package(backward_ros REQUIRED)<br></code></pre></td></tr></table></figure><p>如果你想要加快编译速度，可以使用 <code>--parallel-workers</code> 选项开启多个线程并行编译，例如同时启动 5 个线程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">colcon build --symlink-install --cmake-args -DCMAKE_BUILD_TYPE=RelWithDebInfo --parallel-workers 5<br></code></pre></td></tr></table></figure><p>编译完成后，就可以通过 <code>ros2 run</code> 命令带上 <code>--prefix</code> 参数传入 <code>gdb</code> 指令，在 GDB 调试环境中启动 ROS 节点程序。命令语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ros2 run --prefix <span class="hljs-string">&#x27;gdb -ex run --args&#x27;</span> package_name executable_name<br></code></pre></td></tr></table></figure><p>这里的 <em>package_name</em> 是 ROS 包名，<em>executable_name</em> 是节点程序名。</p><h3><span id="配置-gdb-server">配置 GDB Server</span></h3><p>ROS 中的 GDB 调试方法同样支持 GDB Server 远程调试，只需要修改 <code>--prefix</code> 参数即可，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ros2 run --prefix <span class="hljs-string">&#x27;gdbserver localhost:3000&#x27;</span> package_name executable_name<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt5-源码编译</title>
      <link href="/qt5/"/>
      <url>/qt5/</url>
      
        <content type="html"><![CDATA[<h2><span id="ubuntu下qt-515源码编译">ubuntu下QT 5.15源码编译</span></h2><h4><span id="1下载源码">1.下载源码</span></h4><p><a href="https://download.qt.io/archive/qt">qt官网</a> : <strong><a href="https://download.qt.io/archive/qt">https://download.qt.io/archive/qt</a></strong></p><p><img src="/qt5/1.png"></p><h4><span id="2解压">2.解压：</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">tar xvf qt-everywhere-src-5.15.2.tar.xz<br></code></pre></td></tr></table></figure><h4><span id="3安装依赖">3.安装依赖</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install gcc<br>sudo apt-get install gedit<br>sudo apt-get install flex<br>sudo apt-get install bison<br>sudo apt-get install gperf<br>sudo apt-get install libxcb*<br>sudo apt-get install build-essential<br>sudo apt-get install libgl1-mesa-dev<br>sudo apt-get install libglu1-mesa-dev<br>sudo apt-get install libegl1-mesa-dev<br>sudo apt-get install freeglut3-dev<br>sudo apt-get install libxkbcommon-x11-dev<br>sudo apt-get install libxkbcommon-dev<br>sudo apt-get install libxrender-dev<br>sudo apt-get install libx11-dev<br>sudo apt-get install libx11-xcb-dev<br></code></pre></td></tr></table></figure><h4><span id="4配置">4.配置</span></h4><p>切换到已解压的源码目录目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd qt-everywhere-src-5.15.2<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">./configure<br></code></pre></td></tr></table></figure><p><code>/home/sweet/qt-everywhere-src-5.15.2/qtbase/include/QtCore/../../src/corelib/global/qendian.h:333:54: error: incomplete type ‘std::numeric_limits’ used in nested name specifier  333 |     &#123; return QSpecialInteger(std::numeric_limits&lt;T&gt;::min()); &#125;</code></p><p>若有这个报错：</p><p>在qt下：&#x2F;qtbase&#x2F;src&#x2F;corelib&#x2F;global&#x2F;qglobal.h</p><p>找qglobal.h，加上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include &lt;limits&gt;<br></code></pre></td></tr></table></figure><img src="/qt5/2.png" style="zoom:50%;"><p>运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">./configure<br></code></pre></td></tr></table></figure><p>选o</p><p><img src="/qt5/3.png" alt="3"></p><p>选y</p><p><img src="/qt5/sweet/hexo/blog/source/_posts/qt5/4.png" alt="4"></p><p>然后make 编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">make -j8<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/vim/"/>
      <url>/vim/</url>
      
        <content type="html"><![CDATA[<h1><span id="vim基础">vim基础</span></h1><h3><span id="终端输入vim-xx进入命令模式">终端输入vim xx进入命令模式</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">touch test.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">vim test.txt<br></code></pre></td></tr></table></figure><h3><span id><img src="/vim/1.png" style="zoom:50%;"></span></h3><h3><span id="命令模式为一开始进入-vim-的默认模式在任何模式下键盘输入-esc-会回到这个预设模式中-如果要切换到其它模式使用键盘输入">命令模式为一开始进入 vim 的默认模式，在任何模式下键盘输入: ESC 会回到这个预设模式中。 如果要切换到其它模式使用键盘输入</span></h3><h3><span id="i-切换到插入模式可以输入字符串文字内容">i ：切换到插入模式，可以输入字符串文字内容</span></h3><h3><span id="切换到底线命令模式可以在最底一行输入操作指令">: ：切换到底线命令模式，可以在最底一行输入操作指令</span></h3><h3><span id="v切换到视觉模式可以使用鼠标光标选择文字方便阅读和强调">v：切换到视觉模式，可以使用鼠标光标选择文字，方便阅读和强调</span></h3><h3><span id="x删除游标所在字元">x：删除游标所在字元</span></h3><h2><span id="其他常见指令">其他常见指令</span></h2><h4><span id="enter换行">Enter：换行</span></h4><h4><span id="back-space-删除游标前一个字元">Back Space 删除游标前一个字元</span></h4><h4><span id="del-删除游标后一个字元">Del 删除游标后一个字元</span></h4><h4><span id="方向键-在文档中移动游标">方向键 在文档中移动游标</span></h4><h4><span id="page-upx2fpage-down-上x2f下翻页">Page Up&#x2F;Page Down 上&#x2F;下翻页</span></h4><h2><span id="底线命令模式">底线命令模式</span></h2><h3><span id="键盘输入-就可以进入底线命令模式让我们可以输入指令操作内容-若要离开或是储存离开vim就要透过底线命令模式输入指令-若键盘输入esc会回到命令模式">键盘输入: 就可以进入底线命令模式，让我们可以输入指令操作内容。 若要离开或是储存离开vim就要透过底线命令模式输入指令。 若键盘输入ESC会回到命令模式</span></h3><h3><span id><img src="/vim/2.png" style="zoom:50%;"></span></h3><h2><span id="常见指令">常见指令</span></h2><h3><span id="q-不储存直接离开">:q 不储存直接离开</span></h3><h3><span id="q-不存储强制直接离开有修改但不想储存时">：q! 不存储，强制直接离开（有修改但不想储存时）</span></h3><h3><span id="e-放弃所有修改从上次存储文件记录开始编辑">：e! 放弃所有修改，从上次存储文件记录开始编辑</span></h3><h3><span id="w-存储文档但不离开">：w 存储文档但不离开</span></h3><h3><span id="w-强制存储文档但不离开">：!w 强制存储文档但不离开</span></h3><h3><span id="w-name-储存文档并命名为name但不离开">：w {name} 储存文档并命名为name，但不离开</span></h3><h3><span id="wq-储存并离开">：wq 储存并离开</span></h3><h3><span id="wq-强制储存并离开">：!wq 强制储存并离开</span></h3><h2><span id="可视模式">可视模式</span></h2><h3><span id="在命令模式输入-v-可以进入可视模式使用滑鼠游标选择文字方便阅读和强调键盘输入-esc-会回到命令模式">在命令模式输入 <code>v</code> 可以进入可视模式使用滑鼠游标选择文字，方便阅读和强调，键盘输入 <code>Esc</code> 会回到命令模式。</span></h3><h3><span id><img src="/vim/3.png" style="zoom:50%;"></span></h3><h1><span id="更多常用指令和使用情境">更多常用指令和使用情境</span></h1><p><code>:0</code>：移动到文件的起点<br><code>:&#123;number&#125;</code>：移动到第 {number} 行<br><code>:$</code>：移动到文件最后一行</p><h2><span id="命令模式刪除字元">[命令模式]刪除字元</span></h2><p><code>x</code>：刪除游标所在的字元<br><code>dd</code>：刪除本行<br><code>&#123;n&#125;dd &#123;n&#125;</code>：刪除游标所在的那一行往下数 {n} 行</p><h2><span id="命令模式复制粘贴">[命令模式]复制粘贴</span></h2><p><code>yy</code>：复制游标所在的那一行並放入暂存区<br><code>&#123;n&#125;yy</code>：复制游标所在的那一行往下数 {n} 行并放入暂存区<br><code>p</code>：复制暂存区的內容到游标所在下方<br><code>P</code>：复制暂存区的內容到游标所在上方</p><h2><span id="命令模式复原">[命令模式]复原</span></h2><p><code>u</code>：恢复之前的修改</p><h2><span id="底線命令模式搜尋取代">[底線命令模式]搜尋取代</span></h2><p><code>/&#123;text&#125;</code>：寻找 {text} 字串位于文件位置<br><code>[范围] s/&#123;from&#125;/&#123;to&#125;/g</code>：在范围（1, $ 代表全部文件）中將 {from} 取代为 {to}，<code>/g</code>。 为全部取代。（例如： <code>1, 4 s/name/username/g</code> 为將 1-4 行字串中所有 <code>name</code> 改為 <code>username</code>）</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型转换</title>
      <link href="/model-change/"/>
      <url>/model-change/</url>
      
        <content type="html"><![CDATA[<p><strong>模型转换：</strong></p><p>1.yolov8训练出来的best.pt模型文件转onnx</p><p>这里比较简单，yolov8官方有一个pip包，里面可以用终端指令</p><p>pip install ultralytics（快速安装）</p><p>或者:</p><p>1.下载源码git clone </p><p><a href="https://github.com/ultralytics/ultralytics.git">https://github.com/ultralytics/ultralytics.git</a></p><p>2.安装python包 pip install -r requirements.txt</p><p>3.在ultralytics-main的文件目录里，运行以下命令pip install -e .</p><p>测试是否安装成功：python文件运行以下指令</p><p>import ultralytics</p><p>ultralytics.checks()</p><p>反馈以下结果，则说明ultralytics安装成功</p><p><img src="/model-change/1.png"></p><p>进入环境，打开一个终端</p><p>输入指令：yolo mode&#x3D;export model&#x3D;&#x2F;home&#x2F;sweet&#x2F;vs&#x2F;yolov8&#x2F;runs&#x2F;detect&#x2F;train2&#x2F;weights&#x2F;best.pt </p><p>format&#x3D;onnx device&#x3D;0</p><p>其中 mode是模式</p><p>model：模型路径</p><p>format：导出的格式</p><p>device：设备，0为电脑上第一张显卡，cpu则用cpu导出</p><p>你也可以用python，在xx.py文件里</p><p><img src="/model-change/2.png" alt="image-20231203220001731"></p><p>只需要在export里面继续加下面的键值就行</p><p><img src="/model-change/3.png" alt="image-20231203220033302"></p><h3><span id="onnx转ir模型">onnx转IR模型</span></h3><p>安装openvino python版即可</p><p>pip install openvino</p><p>找到安装openvino的地方，寻找mo_onnx.py</p><p>打开终端：输入ython3 mo_onnx.py –input_model &lt;onnx模型路径&gt; –output_dir &lt;IR模型输出路径&gt; –input_shape [输入形状] –compress_to_fp16</p><p>–input_shape 在不知道输入形状的情况下用，可以用netron来看,从下面INPUTS可知,data_type是FP16，shape是[1,3,640,640]</p><p><img src="/model-change/4.png" alt="image-20231203220136878"></p><p><img src="/model-change/5.png" alt="image-20231203220236436"></p><p><em><strong>*–mean_values*</strong></em> 参数指定输入图像各通道的均值</p><p><em><strong>*–scale_values*</strong></em> 参数指定输入图像各通道的缩放因子</p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的小东西</title>
      <link href="/funny/"/>
      <url>/funny/</url>
      
        <content type="html"><![CDATA[<h3><span id="有点用的小网站">有点用的小网站</span></h3><p> <a href="https://473328746.wixsite.com/my-site">主页导航网站</a>（需要科学上网，有用但不多）</p><h3><span id="vscode好玩插件">vscode好玩插件</span></h3><h4><span id="1code-gpt帮你联想代码写注释">1.code GPT（帮你联想代码，写注释）</span></h4><p>   <strong>github copilot 代码GPT</strong></p><p>   <strong>TONGYI Lingma  （同等功能）</strong></p><p>   <strong>CodeGeeX （同等功能）</strong></p><h4><span id="2md文件预览">2.MD文件预览</span></h4><p><strong>Markdown Preview Github Styling</strong></p><p><strong>Markdown All in One</strong></p><h4><span id="3滑词翻译">3.滑词翻译</span></h4><p><strong>Code Translate</strong></p><h4><span id="4代码截图">4.代码截图</span></h4><p><strong>CodeSnap</strong></p><h1><span id="博客pro">博客pro</span></h1><p>本博客用hexo为框架 kira为主题</p><p><a href="https://github.com/ch1ny/kira-hexo">kira-hexo</a></p><h3><span id="美化-添加好玩的玩意">美化-添加好玩的玩意</span></h3><h2><span id="添加鼠标点击爱心效果">● 添加鼠标点击爱心效果</span></h2><p>找到&#x2F;hexo-theme-kira文件夹里面&#x2F;source&#x2F;js 下新建文件 love.js，在 love.js 文件中添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">!<span class="hljs-keyword">function</span>(<span class="hljs-params">e,t,a</span>)&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">n</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">c</span>(<span class="hljs-string">&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#x27;&#x27;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 500%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;</span>),<span class="hljs-title function_">o</span>(),<span class="hljs-title function_">r</span>()&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">r</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> e=<span class="hljs-number">0</span>;e&lt;d.<span class="hljs-property">length</span>;e++)d[e].<span class="hljs-property">alpha</span>&lt;=<span class="hljs-number">0</span>?(t.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeChild</span>(d[e].<span class="hljs-property">el</span>),d.<span class="hljs-title function_">splice</span>(e,<span class="hljs-number">1</span>)):(d[e].<span class="hljs-property">y</span>--,d[e].<span class="hljs-property">scale</span>+=<span class="hljs-number">.004</span>,d[e].<span class="hljs-property">alpha</span>-=<span class="hljs-number">.013</span>,d[e].<span class="hljs-property">el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">cssText</span>=<span class="hljs-string">&quot;left:&quot;</span>+d[e].<span class="hljs-property">x</span>+<span class="hljs-string">&quot;px;top:&quot;</span>+d[e].<span class="hljs-property">y</span>+<span class="hljs-string">&quot;px;opacity:&quot;</span>+d[e].<span class="hljs-property">alpha</span>+<span class="hljs-string">&quot;;transform:scale(&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;,&quot;</span>+d[e].<span class="hljs-property">scale</span>+<span class="hljs-string">&quot;) rotate(45deg);background:&quot;</span>+d[e].<span class="hljs-property">color</span>+<span class="hljs-string">&quot;;z-index:99999&quot;</span>);<span class="hljs-title function_">requestAnimationFrame</span>(r)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">var</span> t=<span class="hljs-string">&quot;function&quot;</span>==<span class="hljs-keyword">typeof</span> e.<span class="hljs-property">onclick</span>&amp;&amp;e.<span class="hljs-property">onclick</span>;e.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;t&amp;&amp;<span class="hljs-title function_">t</span>(),<span class="hljs-title function_">i</span>(e)&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">i</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);a.<span class="hljs-property">className</span>=<span class="hljs-string">&quot;heart&quot;</span>,d.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">el</span>:a,<span class="hljs-attr">x</span>:e.<span class="hljs-property">clientX</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">y</span>:e.<span class="hljs-property">clientY</span>-<span class="hljs-number">5</span>,<span class="hljs-attr">scale</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">alpha</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">color</span>:<span class="hljs-title function_">s</span>()&#125;),t.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-keyword">var</span> a=t.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;style&quot;</span>);a.<span class="hljs-property">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>;<span class="hljs-keyword">try</span>&#123;a.<span class="hljs-title function_">appendChild</span>(t.<span class="hljs-title function_">createTextNode</span>(e))&#125;<span class="hljs-keyword">catch</span>(t)&#123;a.<span class="hljs-property">styleSheet</span>.<span class="hljs-property">cssText</span>=e&#125;t.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&quot;head&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">s</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span><span class="hljs-string">&quot;rgb(&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;,&quot;</span>+~~(<span class="hljs-number">255</span>*<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>())+<span class="hljs-string">&quot;)&quot;</span>&#125;<span class="hljs-keyword">var</span> d=[];e.<span class="hljs-property">requestAnimationFrame</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> e.<span class="hljs-property">requestAnimationFrame</span>||e.<span class="hljs-property">webkitRequestAnimationFrame</span>||e.<span class="hljs-property">mozRequestAnimationFrame</span>||e.<span class="hljs-property">oRequestAnimationFrame</span>||e.<span class="hljs-property">msRequestAnimationFrame</span>||<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<span class="hljs-built_in">setTimeout</span>(e,<span class="hljs-number">1e3</span>/<span class="hljs-number">60</span>)&#125;&#125;(),<span class="hljs-title function_">n</span>()&#125;(<span class="hljs-variable language_">window</span>,<span class="hljs-variable language_">document</span>);<br></code></pre></td></tr></table></figure><p>找到&#x2F;hexo-theme-kira文件夹&#x2F;layout&#x2F; 除了layout.ejs外，其他xx.ejs都要加 少一个则不能全覆盖 文件末尾添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/love.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>完成以上操作后，当我们点击鼠标的时候就可以看见爱心的特效了</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h3><span id="安装git">安装git</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install git<br></code></pre></td></tr></table></figure><h3><span id="生成密钥">生成密钥</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh-keygen -t rsa -C &quot;你的github邮箱&quot;<br></code></pre></td></tr></table></figure><p>之后一直点确定（enter键）</p><p>1、这时目录下会生成一个.ssh隐藏文件夹，按ctrl+h可以显示隐藏文件夹，里面有两个文件：id_rsah（私钥）和id_rsa.pub（公钥）文件。<br>2、终端输入下面指令来获取id_rsa.pub里面的key（<strong>秘钥</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p><img src="/git/4.png"></p><p>然后登录GitHub，点击右上角头像，依次点击Settings —&gt; Personal settings —&gt; SSH and GPG keys。在SSH Keys标签右方点击New SSH Key。</p><p><img src="/git/1.png"></p><p>3、弹出两个文本框。其中的Title，可以随意命名。另一个Key文本框，需要输入刚刚生成的id_rsa.pub文件中的内容。<br>4、粘贴后点击Add SSH Key，即可生成SSH Key。</p><p><img src="/git/2.png"></p><h3><span id="验证ssh-是否成功连接">验证SSH 是否成功连接</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p><img src="/git/3.png"></p><h3><span id="编辑你的gitconfig文件">编辑你的.gitconfig文件</span></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git config --global user.name &quot;github姓名&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git config --global user.email github邮箱<br></code></pre></td></tr></table></figure><h2><span id="上传项目">上传项目</span></h2><p>进入要上传的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git init<br></code></pre></td></tr></table></figure><p>如果是要上传单个文件，将.改为文件名（.代表目录下全部文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git add .<br></code></pre></td></tr></table></figure><p>上传文件的描述（备注）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git commit -m &quot;first commit&quot;<br></code></pre></td></tr></table></figure><p>创建分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git branch test<br></code></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git checkout test<br></code></pre></td></tr></table></figure><p>添加文件到远程库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git remote add origin https://github.com/你的账号名/你刚才新建的仓库名.git<br></code></pre></td></tr></table></figure><p>清空远程origin</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git remote rm origin<br></code></pre></td></tr></table></figure><p>上传文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git push -u origin master<br></code></pre></td></tr></table></figure><p><strong>-u</strong> 将当前分支与远程分支关联起来。使用 <code>-u</code> 参数后，以后可以简化推送命令，只需执行 <code>git push</code> 即可，而不必每次都指定远程和分支。</p><p><strong>-f</strong>  强制推送，即使在远程分支存在更新时也会强制推送本地分支。使用 <code>-f</code> 选项时要小心，因为它会覆盖远程分支上的所有更改，可能导致数据丢失</p><p><strong>-n</strong>  执行一次模拟的推送，不会真正将更改推送到远程仓库，但会显示将要推送的更改</p><p><strong>–all</strong>  将所有的本地分支都推送到远程仓库。</p><p><strong>-v</strong>  显示详细的推送信息，包括更改的详细信息</p><p><strong>–force-with-lease</strong>  类似于 <code>-f</code>，但更安全，会在推送前检查远程分支是否有其他人已经推送了更改</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>robomaster</title>
      <link href="/robomaster/"/>
      <url>/robomaster/</url>
      
        <content type="html"><![CDATA[<h1><span id="调车日寄">调车日寄</span></h1><h3><span id="1串口驱动问题">1.串口驱动问题</span></h3><p>串口线：RX,TX,GD(RX接TX，TX接RX)</p><p>当你接上串口线后没有出现下面类似文件时（找不到ttyUSB* 或ttyCH34* USB*）</p><p>找不到下面文件时：</p><p><img src="/robomaster/1.png"></p><h5><span id="修复方法">修复方法：</span></h5><p>1 查看电脑的内核版本，得到自己的ubuntu内核版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">uname -r<br></code></pre></td></tr></table></figure><p><img src="/robomaster/2.png"></p><h5><span id="2-下载安装包">2 下载安装包</span></h5><p>CH340&#x2F;CH341的USB转串口LINUX驱动程序，随系统进行编译安装，支持各类处理器架构，支持32&#x2F;64位系统。</p><p>下载连接：<a href="https://www.wch.cn/download/CH341SER_LINUX_ZIP.html">Linux驱动链接</a></p><p>选这个</p><p><img src="/robomaster/3.png"></p><p>将压缩包解压后进入到driver文件夹，在这里打开终端</p><h5><span id="3进行编译安装">3.进行编译安装</span></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo make<br></code></pre></td></tr></table></figure><p>编译后将文件移动到内核版本的串口文件夹里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo cp -v ch34*.ko /lib/modules/4.19.0-42-generic/kernel/drivers/usb/serial/<br></code></pre></td></tr></table></figure><p>更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo depmod -a<br></code></pre></td></tr></table></figure><p>重启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo reboot<br></code></pre></td></tr></table></figure><h3><span id="串口固定"></span></h3>]]></content>
      
      
      <categories>
          
          <category> robomaster </category>
          
      </categories>
      
      
        <tags>
            
            <tag> robomaster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu22.04安装unity</title>
      <link href="/unity/"/>
      <url>/unity/</url>
      
        <content type="html"><![CDATA[<p>本教程参考博客：<a href="https://blog.csdn.net/AWNUXCVBN/article/details/126456365">在Ubuntu 22.04上安装Unity Hub</a></p><h2><span id="安装unity-hub">安装unity hub</span></h2><p>官网链接：<a href="https://unity.cn/releases">unity</a></p><p>直接从官网下载的deb安装包有问题，打开啥也显示不了</p><p>所以通过链接密钥来下载</p><p>添加 Unity3D 存储库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo sh -c &#x27;echo &quot;deb https://hub.unity3d.com/linux/repos/deb stable main&quot; &gt; /etc/apt/sources.list.d/unityhub.list&#x27;<br></code></pre></td></tr></table></figure><p>添加公共签名密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">wget -qO - https://hub.unity3d.com/linux/keys/public | sudo tee /etc/apt/trusted.gpg.d/unityhub.asc<br></code></pre></td></tr></table></figure><p>安装 Unity Hub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt update<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt install unityhub<br></code></pre></td></tr></table></figure><h3><span id="unity设置中文">Unity设置中文</span></h3><p><img src="/unity/1.png"></p><p><img src="/unity/2.png"></p><p><a href="https://blog.csdn.net/jiafuyong/article/details/101353270">Unity3d设置成中文版</a></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT</title>
      <link href="/ChatGPT/"/>
      <url>/ChatGPT/</url>
      
        <content type="html"><![CDATA[<h3><span id="首先你得确定你是否能科学上网">首先你得确定你是否能科学上网</span></h3><p>若不能请参考：<a href="https://swe-et.github.io/internet/">科学上网教程</a></p><h1><span id="1注册谷歌账号">1.注册谷歌账号</span></h1><p><a href="https://accounts.google.com/InteractiveLogin/identifier?continue=https://www.google.com.hk/?pli=1&ec=GAZAmgQ&flowEntry=ServiceLogin&flowName=GlifWebSignIn&hl=en&ifkv=AeDOFXj6E0teUQ5n5HIRlOTR80FQUQ_FFvFTYGHI8_1B9fDn268hLKwmZOIPSclqQtuLYYHh-W_e&passive=true">谷歌账号注册</a></p><p><img src="/ChatGPT/1.png"></p><p><img src="/ChatGPT/2.png"></p><p><img src="/ChatGPT/3.png"></p><p>输入手机号，等待短信验证</p><p><img src="/ChatGPT/4.png"></p><p><img src="/ChatGPT/5.png"></p><p>这样就注册完成了。</p><h1><span id="注册chatgpt">注册chatGPT</span></h1><p>进入<a href="https://chat.openai.com/">chatGPT官网</a></p><p>选择注册</p><p><img src="/ChatGPT/6.png"></p><p><img src="/ChatGPT/7.png"></p><p>chatGPT会让你用手机号注册（中国手机号不行）这时候就需要花点小钱去拿到验证码了：</p><p><a href="https://sms-activate.org/">接码平台SMS-Activate.org</a></p><p><img src="/ChatGPT/8.png"></p><p><img src="/ChatGPT/9.png"></p><p><img src="/ChatGPT/10.png"></p><p>选择一个喜欢的国家</p><p><img src="/ChatGPT/11.png"></p><p><img src="/ChatGPT/12.png"></p><p><img src="/ChatGPT/13.png"></p><p><img src="/ChatGPT/14.png"></p><h4><span id="这样就注册完成了">这样就注册完成了！！</span></h4><p><img src="/ChatGPT/15.png"></p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yolov5</title>
      <link href="/yolov5/"/>
      <url>/yolov5/</url>
      
        <content type="html"><![CDATA[        <div id="aplayer-pfSnWVYb" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-pfSnWVYb"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "ClariS",              author: "treasure",              url: "treasure.flac",              pic: "/yolov5/1.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p>如何运行yolov5</p><p>来到data目录</p><p><img src="/yolov5/3.png"></p><p>路径是你数据集的路径，记得改！！</p><p>进入models，小模型我用yolov5s，将5s复制一份，改掉名字</p><p><img src="/yolov5/4.png" alt="4"></p><p>将train.py里面的路径改改，拉到第四百多行代码，函数名。。。叫下面图的有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#x27;--cfg&#x27; 是上面models里面xx.yaml的路径<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#x27;--data&#x27; 是data里面xx.yaml的路径<br></code></pre></td></tr></table></figure><p>运行的话，将detect.py改改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#x27;--weights&#x27; 后面ROOT /之后的路径改成你训练完的模型，一般在runs/train/exp（max最大数是最后训练完成的）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#x27;--source&#x27; 将要识别的图片或视频的路径<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#x27;--conf-thres&#x27; 置信度最好改高一些,太低会乱标<br></code></pre></td></tr></table></figure><p>yolov5没什么好说的，暂时没那能力去修改人家的卷积（不知道修改完后是好是坏），顶多就只能改改参数（人称炼丹)</p><p>下面是一些yolov5参数的注释</p><p>train.py</p><p><img src="/yolov5/2.png"></p><p>detect.py</p><p><img src="/yolov5/1.png"></p><p>yolov5的一些小问题：</p><p><img src="/yolov5/5.png"></p><p>解决方法：<a href="https://blog.csdn.net/Thebest_jack/article/details/125649451">参考博客</a></p><p>iou：预测框与真实框的差距</p><p>map：精度x召回率的平均值</p><p>NMS（非极大值抑制）:获取iou大于一定比例的，按置信度进行排序，取其中最大的</p><p>batch normalization（BN）：它是一种在神经网络的每一层中对输入进行归一化的方法</p><h3><span id="yolov5网络结构图">Yolov5网络结构图</span></h3><p>安装好netron工具，就可以可视化的打开Yolov5的网络结构。</p><p><a href="https://blog.csdn.net/nan355655600/article/details/106245563">netron下载安装流程</a></p><p>将四种模型pt文件的转换成对应的onnx文件后，即可使用<a href="https://link.zhihu.com/?target=https://blog.csdn.net/nan355655600/article/details/106245563">netron工具</a>查看。</p><p><strong>（1）输入端：</strong>Mosaic数据增强：<strong>随机缩放</strong>、<strong>随机裁剪</strong>、<strong>随机排布</strong>的方式进行拼接</p><p>​  自适应锚框计算：针对不同的数据集，会有<strong>初始设定长宽的锚框</strong>，网络在初始锚框的基</p><p>​  础上输出预测框，进而和<strong>真实框</strong>进行比对，计算两者差</p><p>​   距，再反向更新，<strong>迭代网络参数</strong>。</p><p><img src="/yolov5/6.png" alt="6"></p><p>​控制的代码即<strong>train.py</strong>中上面一行代码，设置成<strong>False</strong>，每次训练时，不会自动计算。</p><p>​自适应图片缩放：因此在Yolov5的代码中datasets.py的letterbox函数中进行了修改，对 原始图像<strong>自适应的添加最少的黑边</strong>。黑边减少，计算量也减少，检测 速度提升</p><p>​  计算缩放比例，长&#x2F;416,宽&#x2F;416，选择小的缩放系数</p><p><strong>（2）Backbone：</strong>Focus结构：切片操作，比如右图的切片示意图，4 * 4 * 3的图像切片后变成2*2 *12的特征图</p><p><img src="/yolov5/7.png" alt="7"></p><p>​ CSP结构：<br><strong>（3）Neck：</strong>FPN+PAN结构<br><strong>（4）Prediction：</strong>GIOU_Loss</p><p><strong>IOU_Loss：</strong>主要考虑检测框和目标框重叠面积。</p><p><strong>GIOU_Loss：</strong>在IOU的基础上，解决边界框不重合时的问题。</p><p><strong>DIOU_Loss：</strong>在IOU和GIOU的基础上，考虑边界框中心点距离的信息。</p><p><strong>CIOU_Loss：</strong>在DIOU的基础上，考虑边界框宽高比的尺度信息。</p><h4><span id="yolov8">yolov8</span></h4><h5><span id="模型推理过程">模型推理过程</span></h5><p><strong>(1) bbox 积分形式转换为 4d bbox 格式</strong><br>对 Head 输出的 bbox 分支进行转换，利用 Softmax 和 Conv 计算将积分形式转换为 4 维 bbox 格式<br><strong>(2) 维度变换</strong><br>YOLOv8 输出特征图尺度为 80x80、40x40 和 20x20 的三个特征图。Head 部分输出分类和回归共 6 个尺度的特征图。<br>将 3 个不同尺度的类别预测分支、bbox 预测分支进行拼接，并进行维度变换。为了后续方便处理，会将原先的通道维度置换到最后，类别预测分支 和 bbox 预测分支 shape 分别为 (b, 80x80+40x40+20x20, 80)&#x3D;(b,8400,80)，(b,8400,4)。<br><strong>(3) 解码还原到原图尺度</strong><br>分类预测分支进行 Sigmoid 计算，而 bbox 预测分支需要进行解码，还原为真实的原图解码后 xyxy 格式。<br><strong>(4) 阈值过滤</strong><br>遍历 batch 中的每张图，采用 score_thr 进行阈值过滤。在这过程中还需要考虑 <strong>multi_label 和 nms_pre，确保过滤后的检测框数目不会多于 nms_pre。</strong><br><strong>(5) 还原到原图尺度和 nms</strong><br>基于前处理过程，将剩下的检测框还原到网络输出前的原图尺度，然后进行 nms 即可。最终输出的检测框不能多于 <strong>max_per_img。</strong></p><h4><span id="特征图可视化">特征图可视化</span></h4><p>MMYOLO 中提供了一套完善的特征图可视化工具，可以帮助用户可视化特征的分布情况。</p><p>以 YOLOv8-s 模型为例，第一步需要下载官方权重，然后将该权重通过<a href="https://link.zhihu.com/?target=https://github.com/open-mmlab/mmyolo/blob/dev/tools/model_converters/yolov8_to_mmyolo.py">https://github.com/open-mmlab/mmyolo/blob/dev/tools/model_converters&#x2F;yolov8_to_mmyolo.py</a> 脚本将去转换到 MMYOLO 中，注意必须要将脚本置于官方仓库下才能正确运行，假设得到的权重名字为 mmyolov8s.pth</p><p>假设想可视化 backbone 输出的 3 个特征图效果，则只需要</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cd mmyolo <span class="hljs-comment"># dev 分支</span><br>python demo/featmap_vis_demo.py demo/demo.jpg configs/yolov8/yolov8_s_syncbn_fast_8x<br></code></pre></td></tr></table></figure><p>需要特别注意，为了确保特征图和图片叠加显示能对齐效果，需要先将原先的 test_pipeline 替换为如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">test_pipeline = [<br>    <span class="hljs-built_in">dict</span>(<br>        <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;LoadImageFromFile&#x27;</span>,<br>        file_client_args=_base_.file_client_args),<br>    <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;mmdet.Resize&#x27;</span>, scale=img_scale, keep_ratio=<span class="hljs-literal">False</span>), <span class="hljs-comment"># 这里将 LetterResize 修改成 mmdet.Resize</span><br>    <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;LoadAnnotations&#x27;</span>, with_bbox=<span class="hljs-literal">True</span>, _scope_=<span class="hljs-string">&#x27;mmdet&#x27;</span>),<br>    <span class="hljs-built_in">dict</span>(<br>        <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;mmdet.PackDetInputs&#x27;</span>,<br>        meta_keys=(<span class="hljs-string">&#x27;img_id&#x27;</span>, <span class="hljs-string">&#x27;img_path&#x27;</span>, <span class="hljs-string">&#x27;ori_shape&#x27;</span>, <span class="hljs-string">&#x27;img_shape&#x27;</span>,<br>                   <span class="hljs-string">&#x27;scale_factor&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><p><img src="/yolov5/9.png" alt="7"></p><p>看出<strong>不同输出特征图层主要负责预测不同尺度的物体</strong>。</p><p>我们也可以可视化 Neck 层的 3 个输出层特征图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cd mmyolo <span class="hljs-comment"># dev 分支</span><br>python demo/featmap_vis_demo.py demo/demo.jpg configs/yolov8/yolov8_s_syncbn_fast_8xb16-500e_coco.py mmyolov8s.pth --channel-reductio squeeze_mean --target-layers neck<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch</title>
      <link href="/pytorch/"/>
      <url>/pytorch/</url>
      
        <content type="html"><![CDATA[<h2><span id="1安装cuda">1.安装CUDA</span></h2><p>首先确认你的电脑是否有GPU</p><p>终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nvidia-smi<br></code></pre></td></tr></table></figure><p>查看驱动信息,查看叫CUDA Version的</p><p><img src="/pytorch/1.png"></p><p>进官网下载CUDA</p><p>下载地址：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux&target_arch=x86_64&Distribution=WSL-Ubuntu&target_version=2.0&target_type=deb_local">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;Distribution=WSL-Ubuntu&amp;target_version=2.0&amp;target_type=deb_local</a></p><p>你也可以在终端下载(此安装包4个G)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt install nvidia-cuda-toolkit<br></code></pre></td></tr></table></figure><p>下载完之后输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">nvcc -V<br></code></pre></td></tr></table></figure><p>查看CUDA版本（我这边是11.5）</p><p><img src="/pytorch/2.png"></p><p>接下来去到pytorch官网</p><p>地址：<a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a></p><p><img src="/pytorch/3.png"></p><p>打开你anaconda创建的虚拟环境</p><p>终端输入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda activate yolov5<br></code></pre></td></tr></table></figure><p>进入环境后将上面框里的指令粘贴到终端里面</p><p>pytorch下载可能会超时导致下载失败，通过以下指令修改</p><p>下面的指令将连接超时修改成40s，读取超时的时间修改为100s</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --set remote_connect_timeout_secs 40<br>conda config --set remote_read_timeout_secs 100<br></code></pre></td></tr></table></figure><p>安装完成后，在虚拟环境中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">python<br></code></pre></td></tr></table></figure><p>进入python，然后导入pytorch，验证是否安装正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import torch<br>torch.cuda.is_available()<br></code></pre></td></tr></table></figure><p>如果输出True，则成功安装</p><p><img src="/pytorch/4.png"></p><h2><span id="2将环境导入pycharm">2.将环境导入pycharm</span></h2><p>打开pycharm（<a href="https://blog.csdn.net/m0_37758063/article/details/111573552">ubuntu如何下载pycharm</a>）</p><p><img src="/pytorch/5.png"></p><p><img src="/pytorch/6.png"></p><p><img src="/pytorch/7.png"></p><p>成功添加则右下角的解释器python版本后面会有环境名</p><p><img src="/pytorch/8.png"></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda</title>
      <link href="/anaconda/"/>
      <url>/anaconda/</url>
      
        <content type="html"><![CDATA[<h2><span id="1anaconda下载">1.anaconda下载</span></h2><p>下载路径<a href="https://www.anaconda.com/download/">https://www.anaconda.com/download/</a></p><p><img src="/anaconda/1.png"></p><p>嫌官方太慢可以去清华镜像</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><p><img src="/anaconda/2.png"></p><p>打开终端，输入.&#x2F;Anaconda3-5.3.1-Linux-x86_64.sh</p><p><img src="/anaconda/3.png"></p><p><img src="/anaconda/4.png"></p><p><img src="/anaconda/5.png"></p><p><img src="/anaconda/6.png"></p><p><img src="/anaconda/7.png"></p><p><img src="/anaconda/8.png"></p><p><img src="/anaconda/9.png"></p><p><img src="/anaconda/10.png"></p><p>安装完成后，输入conda list查看安装</p><p>创造环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda create -n yolov5 python=3.10<br></code></pre></td></tr></table></figure><p>激活环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda activate yolov5<br></code></pre></td></tr></table></figure><p>安装软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda install package_name<br></code></pre></td></tr></table></figure><p>更新软件包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda update package_name<br></code></pre></td></tr></table></figure><p>删除环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda env remove --name myenv<br></code></pre></td></tr></table></figure><p>查看环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda env list<br></code></pre></td></tr></table></figure><p>退出环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda deactivate<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openvino（ubuntu）+fmt安装教程</title>
      <link href="/openvino/"/>
      <url>/openvino/</url>
      
        <content type="html"><![CDATA[<h3><span id="openvino下载">OpenVINO下载</span></h3><p>首先：你电脑的CPU是Intel的（openvino是英特尔发行的）</p><p>前往官网：<a href="https://www.intel.cn/content/www/cn/zh/developer/tools/openvino-toolkit/download.html?ENVIRONMENT=RUNTIME&OP_SYSTEM=LINUX&VERSION=v_2023_0&DISTRIBUTION=ARCHIVE">openvino下载连接</a></p><p>选择以下安装</p><p><img src="/openvino/1.png"></p><p>点击下载文档，选择适合你电脑ubuntu版本的归档文件</p><p><img src="/openvino/2.png"></p><p>来到安装说明：<a href="https://docs.openvino.ai/2023.0/openvino_docs_install_guides_installing_openvino_from_archive_linux.html">https://docs.openvino.ai/2023.0/openvino_docs_install_guides_installing_openvino_from_archive_linux.html</a></p><p>你也可以不用看这个安装说明</p><p>将openvino解压到&#x2F;home目录下面</p><p>安装依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /opt/intel/openvino_2023.0.0<br>sudo -E ./install_dependencies/install_openvino_dependencies.sh<br></code></pre></td></tr></table></figure><p>为简单起见，创建符号链接很有用，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd /opt/intel<br>sudo ln -s openvino_2023.0.0 openvino_2023<br></code></pre></td></tr></table></figure><p>2.配置环境</p><p>打开终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p>在最后一行添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">source /opt/intel/openvino_2023/setupvars.sh<br></code></pre></td></tr></table></figure><p>这样每次打开终端都会自己配置openvino环境</p><h3><span id="fmt库下载">fmt库下载</span></h3><p>fmt-8.1.1下载地址 <a href="https://fmt.dev/8.1.1/index.html">https://fmt.dev/8.1.1/index.html</a></p><p>选择Download</p><p><img src="/openvino/3.png"></p><p>下载完解压，然后进入fmt目录打开终端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir build<br>cd build<br>cmake -DBUILD_SHARED_LIBS=ON ..<br>make -j8<br>sudo make install<br></code></pre></td></tr></table></figure><h3><span id="修改openvino路径">修改openvino路径</span></h3><p>打开CMakeLists.txt</p><p>找到openvino推理引擎头文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">include_directories(<br>    #OpenVINO推理引擎的头文件<br>    ~/intel/openvino_2023.0.0/runtime/include/<br>    ~/intel/openvino_2023.0.0/runtime/include/ie/<br>    ~/intel/openvino_2023.0.0/runtime/include/ngraph/<br>    ~/intel/openvino_2023.0.0/runtime/include/openvino/<br>    <br>)<br><br>set(InferenceEngine_DIR &quot;~/intel/openvino_2023.0.0/runtime/cmake&quot;)<br>find_package(InferenceEngine)<br></code></pre></td></tr></table></figure><p>一般来说，这样就能运行了，二般的情况我就不知道了</p><h3><span id="源码编译openvino">源码编译openvino</span></h3>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阔学上网</title>
      <link href="/internet/"/>
      <url>/internet/</url>
      
        <content type="html"><![CDATA[<h2><span id="1找个节点">1.找个节点</span></h2><h4><span id="自分を見つける">自分を見つける</span></h4><h2><span id="2下载clash-for-windows">2.下载clash for windows</span></h2><p>下载地址：<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></p><p>选择自己电脑系统的版本</p><p><img src="/internet/1.png"></p><p>解压后进入目录</p><p><img src="/internet/2.png"></p><p>如果你是22.04的ubuntu，选择cfw，直接右键运行即可</p><p>如果是20.04的，在当前目录打开终端：.&#x2F;cfw</p><p>进入后界面是英文的，想改成中文要去下载汉化补丁</p><p>下载路径：<a href="https://u.pcloud.link/publink/show?code=XZPfFgVZawJmWcOeCw7Tqwp9Pxv0TFCNRtiX">https://u.pcloud.link/publink/show?code=XZPfFgVZawJmWcOeCw7Tqwp9Pxv0TFCNRtiX</a></p><p>将汉化不补丁中的 <code>app.asar</code> 和 <code>Clash.for.Windows\resources\</code> 文件中的 <code>app.asar</code> 文件进行替换</p><p>将从节点订阅的URL复制</p><p><img src="/internet/4.png"></p><p>选择配置，将URL复制到上面然后下载</p><p>这样就能用了</p>]]></content>
      
      
      
        <tags>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/camera/"/>
      <url>/camera/</url>
      
        <content type="html"><![CDATA[<h1><span id></span></h1><p>损失函数：用来<strong>估量模型的预测值f(x)与真实值Y的不一致程度</strong>，它是一个非负实值函数,通常使用L(Y, f(x))来表示，损失函数越小，模型的鲁棒性就越好。损失函数是<strong>经验风险函数</strong>的核心部分，也是<strong>结构风险函数</strong>重要组成部分。模型的结构风险函数包括了经验风险项和正则项，通常可以表示成如下式子</p><p><img src="/camera/1.png"></p><p>前面的均值函数表示的是经验风险函数，L代表的是损失函数，后面的Φ是正则化项</p><p>整个式子表示的意思是<strong>找到使目标函数最小时的θ值</strong></p><p>在深度学习中，我们通常会使用损失函数来计算每个小批次数据上的损失，然后通过对整个数据集的所有损失进行平均，得到代价函数</p><p>梯度下降算法：神经网络模型训练最常用的优化算法。对于深度学习模型，基本都是采用梯度下降算法来进行优化训练的。</p><p>原理：目标函数 J（θ） 关于参数 θ 的梯度将是损失函数（loss function）上升最快的方向。而我们要最小化loss，只需要将参数沿着梯度相反的方向前进一个步长，就可以实现目标函数（loss function）的下降，这个步长η又称为学习速率。</p><p>公式：θ &lt;- θ - η*▽J（θ）    J（θ）是参数的梯度</p><p><a href="https://zhuanlan.zhihu.com/p/31630368">梯度下降法</a></p><p>反向传播算法（Backpropagation，BP算法）</p><p>反向传播算法的推导</p><p><img src="/camera/2.png"></p><p>符号约定</p><p><img src="/camera/3.png"></p><p><img src="/camera/8.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>树莓派换源</title>
      <link href="/respberry-pro/"/>
      <url>/respberry-pro/</url>
      
        <content type="html"><![CDATA[<p>1.给树莓派换源</p><p>终端输入（此步骤不需要在vnc上输入，putty上也可以）</p><p><strong>sudo nano &#x2F;etc&#x2F;apt&#x2F;sources.list</strong></p><ul><li>进入文件编辑</li><li>把原来的内容注释 (最前面加 # 号）</li><li>在文件最顶部添加下面的内容：</li><li><strong>deb <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> buster main non-free contrib</strong></li><li><strong>deb-src <a href="http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/">http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/</a> buster main non-free contrib</strong></li><li>按 ctrl-o 保存，按 ctrl-x 关闭，不行则加上 shift</li></ul><p>如果是因为下载太慢（换源后依然很慢）可以选择在自己的电脑上下载好安装包，插入SD卡，直接往roots文件夹里塞进去</p>]]></content>
      
      
      <categories>
          
          <category> raspberry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派开机自启动脚本</title>
      <link href="/respberry-pro-max/"/>
      <url>/respberry-pro-max/</url>
      
        <content type="html"><![CDATA[<p>制作一个脚本：</p><p>终端输入：touch  text.sh</p><p>testboot.sh文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#!/bin/sh<br>cd /home/pi/xxx.xx(你要自启动的程序)<br>chmod 777 /home/pi/xxx.xx<br>sudo ./xxx.xx(你的程序名+后缀)<br></code></pre></td></tr></table></figure><p>ros2 的自启动脚本不太一样</p><p><a href="https://www.guyuehome.com/18734">可以参考古月居的教程</a></p><p>给你的脚本添加权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo chmod 777 text.sh<br></code></pre></td></tr></table></figure><p>测试脚本能否使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo ./xxx.xx(你的程序名+后缀)<br></code></pre></td></tr></table></figure><h4><span id="添加自启动">添加自启动</span></h4><p>1.向rc.local文件添加启动代码</p><p>修改rc.local文件，在终端输入并回车：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo nano /etc/rc.local<br></code></pre></td></tr></table></figure><p>在打开的文本中找到exit 0，在此之前添加的代码在启动时都会被执行，在exit 0 之前添加一行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">su pi -c &quot;exec /home/pi/text.sh&quot;<br></code></pre></td></tr></table></figure><p>ctrl+o保存，ctrl+x退出，然后在终端输入：sudo reboot ,重启系统测试。</p><p>su命令是指定在pi用户下执行这条命令，-c 表示执行完这条命令之后恢复原来的用户。</p><p>ubuntu20.04自启动脚本<br>终端输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">gnome-session-properties<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> raspberry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工业相机（mindvision）</title>
      <link href="/linuxSDK/"/>
      <url>/linuxSDK/</url>
      
        <content type="html"><![CDATA[<h3><span id="去官网下载mindvision的sdk安装包">去官网下载mindvision的SDK安装包</span></h3><p>下载路径：<a href="https://www.mindvision.com.cn/category/software/page/3/">https://www.mindvision.com.cn/category/software/page/3/</a></p><p>选择Linux系统</p><p><img src="/linuxSDK/1.png"></p><p>解压后打开readme.pdf</p><p>根据里面的教程安装依赖<img src="/linuxSDK/2.png"></p><p>最重要的是安装依赖：终端输入：sudo .&#x2F;install.sh</p><p><img src="/linuxSDK/3.png"></p><p>然后进入demo&#x2F;opencv文件夹</p><p>打开main.cpp</p><h3><span id="两种方法解决报错">两种方法解决报错：</span></h3><h4><span id="1加上头文件">1.加上头文件</span></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#include&lt;opencv2/imgproc/imgproc_c.h&gt;<br></code></pre></td></tr></table></figure><p><img src="/linuxSDK/4.png"></p><p>将第一个头文件的路径加入到：c_cpp_properties.json</p><p><img src="/linuxSDK/8.png"></p><h4><span id="2修改代码">2.修改代码</span></h4><p>框框里那行</p><p><img src="/linuxSDK/5.png"></p><p>还有下面的一行代码</p><p><img src="/linuxSDK/6.png"></p><p>最终变成下面这样</p><p><img src="/linuxSDK/7.png"></p><p>这样就行了</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mindvision </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu树莓派无屏幕远程连接</title>
      <link href="/raspberry/"/>
      <url>/raspberry/</url>
      
        <content type="html"><![CDATA[<h3><span id="硬件准备">硬件准备</span></h3><p>1.树莓派（这个必须有吧）</p><p>2.SD卡（16G或32G（个人推荐32G））</p><p>3.USB读卡器（读取SD卡用的，如果你的电脑自带sd卡槽就不需要）</p><p>4.网线（这个可有可无，不过没有网线会很痛苦的）</p><p>3.网线（这个可有可无，不过没有网线会很痛苦的）</p><h3><span id="软件准备">软件准备</span></h3><p><strong>1.烧录镜像的工具<a href="https://www.balena.io/etcher/">blaenEtcher</a></strong></p><p><img src="/raspberry/1.png"></p><p>如果打不开请下载以下软件</p><p>sudo apt install fuse -y</p><p>下载后直接双击下载的Applmage文件就能打开</p><p>树莓派安装全家桶链接(注：基本都是Windows的软件)<a href="https://www.joycekirkland.site/index.php/2021/07/22/%e6%a0%91%e8%8e%93%e6%b4%beqt5opencv%e9%85%8d%e7%bd%ae%e3%80%90%e6%97%a0%e5%b1%8f%e5%b9%95%e8%bf%9c%e7%a8%8b%e8%bf%9e%e6%8e%a5%e3%80%91/">Windows版树莓派无屏幕连接</a>：</p><p>如果你在ubuntu只需要拿里面的镜像文件即可</p><p><a href="https://pan.baidu.com/s/11IX4VvAdE8_sgstE5ihM-w">https://pan.baidu.com/s/11IX4VvAdE8_sgstE5ihM-w</a></p><p>提取码：mpcq</p><p>插上SD卡，选择镜像，开始烧录</p><p><img src="/raspberry/2.png"></p><p><strong>2.远程登录工具putty：</strong></p><p>sudo apt-get install putty -y</p><p>随便开一个终端输入：putty 就能打开putty</p><p><strong>3.找树莓派地址</strong></p><p>这吊玩意是最烦的，有网线还好，没网线等痛苦吧</p><p>安装找ip的nmap</p><p>sudo apt-get install nmap</p><p><strong>无网线的情况下：</strong></p><p>需添加网络配置文件</p><p>1.wpa_supplicant.conf 文件</p><p>打开终端，输入 touch wpa_supplicant.conf</p><p>​touch ssh</p><p>共两个文件，ssh这个文件不需要动，保持空白即可</p><p>这两个文件每次启动树莓派之前都需要弄进bool里面，即使树莓派没连上WiFi，这两个文件也会消失</p><p>wpa_supplicant.conf文件中复制以下内容，ssid是WiFi名称，psk是WiFi密码，可以用手机热点（如果你手机热点可以直接看到地址可以无视nmap）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">country=CN <br>ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev <br>update_config=1 <br><br>network=&#123; <br>ssid=&quot;B3-4&quot; <br>psk=&quot;12345678&quot; <br>key_mgmt=WPA-PSK <br>priority=1 <br>&#125;<br></code></pre></td></tr></table></figure><p>插入SD卡，将上面两个文件塞进boot文件夹中，打开终端，输入:</p><p>sudo nmap -n 192.168.1.1&#x2F;24              (树莓派的ip是会变的，这就很烦，每一次要找一遍，找不到就重启树莓派再找一遍，很麻烦)</p><p><img src="/raspberry/3.png"></p><p>————————-分割线————————-</p><h4><span id="有网线配置方法这个简单很多">有网线配置方法（这个简单很多）</span></h4><p>准备一根网线即可，下载nmap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install nmap<br></code></pre></td></tr></table></figure><p>打开设置</p><p><img src="/raspberry/14.png"></p><p>选择IPv4 选择与其他计算机共享</p><p><img src="/raspberry/13.png"></p><p>树莓派连上网线后直接输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo nmap -n 10.42.1/24<br></code></pre></td></tr></table></figure><p><img src="/raspberry/15.png"></p><p>这个ip是不会变的· - · 所以插网线只需要找一次ip记住它就行</p><p>————————–分割线—————————-</p><p><strong>以下是无网线ip的操作</strong></p><p>打开终端，输入putty，打开putty</p><p>找到叫raspiberry的设备，复制ip到putty</p><p><img src="/raspberry/4.png"></p><p><img src="/raspberry/5.png"></p><p>树莓派用户名为：pi</p><p>默认密码为：raspberry</p><p><img src="/raspberry/6.png"></p><p>如果你要换源或是装opencv，都可以不需要连接vnc，有vnc方便些罢了</p><p><a href>换源网址</a></p><p>进入终端后，输入 sudo raspi-config</p><p>选择第三个</p><p><img src="/raspberry/7.png"></p><p>选择VNC</p><p><img src="/raspberry/8.png"></p><p>选Yes</p><p><img src="/raspberry/9.png"></p><p>完成后回车退出回到终端</p><p><img src="/raspberry/10.png"></p><p>然后输入sudo apt-get update</p><p>完成后输入 sudo apt-get install tightvncserver</p><p>完成后输入 tightvncserver</p><p><img src="/raspberry/12.png"></p><p>如果不是上面的画面那么就重新开始吧</p><p>注：能在终端完成的事，就不需要配置vnc远程连接</p><h3><span id="使用vnc远程连接树莓派">使用VNC远程连接树莓派</span></h3><p>1.下载VNC<a href="https://www.realvnc.com/en/connect/download/viewer/">下载地址</a></p><p><img src="/raspberry/11.png"></p><p>下载安装包 然后用 sudo dpkg -i 文件名.deb 安装</p><p>打开VNC，输入树莓派ip + :5901（英文冒号）</p><p><img src="/raspberry/16.png"></p><p>选择continue</p><p><img src="/raspberry/17.png"></p><p>密码默认是：123456</p><p><img src="/raspberry/18.png"></p><p>成功连接树莓派</p><p><img src="/raspberry/19.png"></p><h5><span id="给树莓派换源"></span></h5><h5><span id="安装opencv"></span></h5><h5><span id="树莓派开机自启动"></span></h5>]]></content>
      
      
      <categories>
          
          <category> raspberry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv4-C++版本下载（附vscode环境配置）</title>
      <link href="/opencv/"/>
      <url>/opencv/</url>
      
        <content type="html"><![CDATA[<meting-js server="netease" type="playlist" id="1958186873" mode="circulation" autoplay="true" mutex="false" listmaxheight="340px" preload="none" theme="#ad7a86"></meting-js><h3><span id="1安装依赖">1.安装依赖</span></h3><p>使用g++和cmake编译opencv4</p><p>安装g++, cmake, make, wget, unzip，若已安装，此步跳过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt install -y g++  unzip cmake <br></code></pre></td></tr></table></figure><p>安装opencv依赖的基本库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install build-essential<br>sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev<br>sudo apt-get update<br>sudo apt-get install python3-dev python3-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev<br></code></pre></td></tr></table></figure><p>若出现　E: 无法定位软件包 libjasper-dev　报错，是因为缺少依赖，终端继续输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo add-apt-repository &quot;deb http://security.ubuntu.com/ubuntu xenial-security main&quot;<br>sudo apt update<br>sudo apt install libjasper1 libjasper-dev<br></code></pre></td></tr></table></figure><p>安装依赖后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev<br></code></pre></td></tr></table></figure><h2><span id="下载opencv源文件">下载OpenCV源文件</span></h2><h3><span id="下载源文件">下载源文件</span></h3><p>直接在<a href="https://opencv.org/releases/">官网</a>上下载源文件（无需翻墙）<a href="https://opencv.org/releases/">https://opencv.org/releases/</a></p><p>点击Source进行下载</p><p><img src="/opencv/1.png"><br>顺便下载opencv-contrib</p><p><a href="https://github.com/opencv/opencv_contrib/tags">https://github.com/opencv/opencv_contrib/tags</a></p><p>选择Download ZIP</p><p><img src="/opencv/2.png"></p><p>在主目录创建一个叫opencv的文件夹</p><p>将刚刚下载的两个压缩包移动到这个文件夹</p><p>来到这个文件夹打开一个新终端</p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">unzip opencv-4.6.0.zip opencv_contrib-4.6.0.zip<br></code></pre></td></tr></table></figure><p>然后进入opencv文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cd ~/opencv-4.6.0<br></code></pre></td></tr></table></figure><p><img src="/opencv/3.png"></p><h3><span id="准备cmake编译">准备CMake编译</span></h3><p>创建build文件夹</p><p>打开终端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">mkdir build &amp;&amp; cd build<br></code></pre></td></tr></table></figure><p><img src="/opencv/15.png"></p><p>开始cmake编译(注意看里面，有一些需要改的东西)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON -D BUILD_TBB=ON -D WITH_OPENMP=ON -DOPENCV_EXTRA_MODULES_PATH=你的opencv_contrib的路径/modules  -D INSTALL_CXX_EXAMPLES=ON -D OPENCV_GENERATE_PKGCONFIG=ON -D WITH_1394=OFF ..<br></code></pre></td></tr></table></figure><p><img src="/opencv/4.png"></p><p>这么长的指令懒得看的直接粘过去就行，其中-D INSTALL_CXX_EXAMPLES&#x3D;ON，是下载C++的编译，你可以换成C或者python，复制多一份将CXX替换掉即可。</p><p>接着输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">make -j8<br></code></pre></td></tr></table></figure><p> -j8中的8指同时使用8个进程，可以根据电脑的进程数调整此值，看你cpu线程有多少，j越多编译越快，个人推荐j8(我用的-j32).</p><p>用make进行安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo make install <br></code></pre></td></tr></table></figure><p><strong>打开opencv环境配置文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo gedit /etc/ld.so.conf.d/opencv.conf<br></code></pre></td></tr></table></figure><p>打开后在里面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">/usr/local/lib<br></code></pre></td></tr></table></figure><p>执行命令使之生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo ldconfig <br></code></pre></td></tr></table></figure><p>配置bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo gedit /etc/bash.bashrc <br></code></pre></td></tr></table></figure><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig<br>export PKG_CONFIG_PATH<br></code></pre></td></tr></table></figure><p>保存更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">source /etc/bash.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sudo updatedb<br></code></pre></td></tr></table></figure><h3><span id="环境配置">环境配置</span></h3><h5><span id="1下载vscode">1.下载vscode</span></h5><h5><span id="vscode下载地址"></span></h5><p><img src="/opencv/5.png"></p><p>选择 .deb  x64</p><p><img src="/opencv/6.png"></p><p>如果下载太慢可以选择换源，将下面框柱的网址改为： vscode.cdn.azure.cn</p><p><img src="/opencv/7.png"></p><p>下载完之后来到下载vscode包的地方，右键打开终端‘</p><p>输入 ： sudo dpkg -i code_1.77.3-1681292746_amd64.deb  </p><p>后面的安装包根据你自己下载的版本更改</p><p><img src="/opencv/8.png"></p><p>打开vscode</p><p>下载C++扩展</p><p><img src="/opencv/11.png"></p><p>回到资源管理器</p><p>按右ctrl+左shift+P</p><p>选择第一个</p><p><img src="/opencv/9.png" alt="9"></p><p>根据下图进行配置</p><p><img src="/opencv/10.png"></p><p>然后随便创建一个text.cpp文件，在text.cpp同一路径下放一张照片，照片名字改0.png，随意也可以</p><p>输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs #include<iostream>//标准库，iostream被吞了，自己手打一下">#include&lt;opencv2/opencv.hpp&gt;<br>using namespace cv;<br>using namespace std;<br>int main()<br>&#123;<br>    Mat img = imread(&quot;0.png&quot;,1);<br>    imshow(&quot;1&quot;,img);<br>    waitKey(0);<br>   return 0;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/opencv/12.png"></p><p>按F5运行一下，会出现一个.vscode文件夹，里面有两个文件（没有也没关系）反正要有三个文件</p><p>c_cpp_properties.json    launch.json    tasks.json</p><p><img src="/opencv/13.png"></p><p>c_cpp_properties.json：复制以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;configurations&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;Linux&quot;,<br>            &quot;includePath&quot;: [<br>                &quot;$&#123;workspaceFolder&#125;/**&quot;,<br>                &quot;/usr/include/opencv4&quot;,<br>                &quot;/usr/local/include/opencv4&quot;<br>            ],<br>            &quot;defines&quot;: [],<br>            &quot;compilerPath&quot;: &quot;/usr/bin/gcc&quot;,<br>            &quot;cStandard&quot;: &quot;c17&quot;,<br>            &quot;cppStandard&quot;: &quot;gnu++17&quot;,<br>            &quot;intelliSenseMode&quot;: &quot;linux-gcc-x64&quot;,<br>            &quot;configurationProvider&quot;: &quot;ms-vscode.makefile-tools&quot;<br>        &#125;<br>    ],<br>    &quot;version&quot;: 4<br>&#125;<br></code></pre></td></tr></table></figure><p>launch.json：复制以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    <br>    &quot;version&quot;: &quot;0.2.0&quot;,<br>    &quot;configurations&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;g++ - Build and debug active file&quot;,<br>            &quot;type&quot;: &quot;cppdbg&quot;,<br>            &quot;request&quot;: &quot;launch&quot;,<br>            &quot;program&quot;: &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;,  //程序文件路径<br>            &quot;args&quot;: [],  //程序运行需传入的参数<br>            &quot;stopAtEntry&quot;: false,<br>            &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;,<br>            &quot;environment&quot;: [],<br>            &quot;externalConsole&quot;: false,   //运行时是否显示控制台窗口<br>            &quot;MIMode&quot;: &quot;gdb&quot;,<br>            &quot;setupCommands&quot;: [<br>                &#123;<br>                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,<br>                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,<br>                    &quot;ignoreFailures&quot;: true<br>                &#125;<br>            ],<br>            &quot;preLaunchTask&quot;: &quot;C/C++: g++ build active file&quot;,/*与tasks.json文件里的label内容保持一直*/<br>            &quot;miDebuggerPath&quot;: &quot;/usr/bin/gdb&quot;<br>        &#125;<br>    ]<br>&#125;<br><br></code></pre></td></tr></table></figure><p>tasks.json：复制以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;tasks&quot;: [<br>        &#123;<br>            &quot;type&quot;: &quot;cppbuild&quot;,<br>            &quot;label&quot;: &quot;C/C++: g++ build active file&quot;,  /* 与launch.json文件里的preLaunchTask的内容保持一致 */<br>            &quot;command&quot;: &quot;/usr/bin/g++&quot;,<br>            &quot;args&quot;: [<br>                &quot;-std=c++11&quot;,<br>                &quot;-g&quot;,<br>                &quot;$&#123;file&#125;&quot;,   /* 编译单个文件 */<br>                //&quot;$&#123;fileDirname&#125;/*.cpp&quot;,  /* 编译多个文件 */<br>                &quot;-o&quot;,<br>                &quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;&quot;,  /* 输出文件路径 */<br> <br>                /* 项目所需的头文件路径 */<br>                &quot;-I&quot;,&quot;$&#123;workspaceFolder&#125;/&quot;,<br>                &quot;-I&quot;,&quot;/usr/local/include/&quot;,<br>                &quot;-I&quot;,&quot;/usr/local/include/opencv4/&quot;,<br>                &quot;-I&quot;,&quot;/usr/local/include/opencv4/opencv2&quot;,<br> <br>                /* 项目所需的库文件路径 */<br>                &quot;-L&quot;, &quot;/usr/local/lib&quot;,<br><br>                /* OpenCV的lib库 */<br>                &quot;/usr/local/lib/libopencv_*&quot;,<br>                <br>            ],<br>            &quot;options&quot;: &#123;<br>                &quot;cwd&quot;: &quot;$&#123;fileDirname&#125;&quot;<br>            &#125;,<br>            &quot;problemMatcher&quot;: [<br>                &quot;$gcc&quot;<br>            ],<br>            &quot;group&quot;: &#123;<br>                &quot;kind&quot;: &quot;build&quot;,<br>                &quot;isDefault&quot;: true<br>            &#125;,<br>            &quot;detail&quot;: &quot;Task generated by Debugger.&quot;<br>        &#125;<br>    ],<br>    &quot;version&quot;: &quot;2.0.0&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到text.cpp，运行代码</p><p><img src="/opencv/14.png"></p><p>图像成功运行，配置完成</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu系统安装22.04版本</title>
      <link href="/ubuntu/"/>
      <url>/ubuntu/</url>
      
        <content type="html"><![CDATA[<h1><span id="安装前准备">安装前准备</span></h1><p>硬件：U盘（不要低于16G）</p><p>软件：下载rufus（制作U盘启动盘）<a href="https://github.com/pbatard/rufus/releases/download/v4.0/rufus-4.0.exe">rufus下载地址</a></p><p>​下载ubuntu22.04<a href="https://cn.ubuntu.com/download/desktop">镜像文件</a></p><h2><span id="1给ubuntu系统分配空间">1.给ubuntu系统分配空间</span></h2><p>计算机——管理——磁盘管理(win11在开始那里右键就能找到磁盘管理)</p><p>需要压缩两个盘</p><p><img src="/ubuntu/1.png" alt="1"></p><p>由于我想在e盘安装ubuntu；则在不需要的盘上右击，选择压缩卷，一个压1G&#x2F;512MB；</p><p><img src="/ubuntu/2.png"></p><p>如果你需求比较大，我建议你多压一点，本人电脑上ubuntu系统300G，扩容很麻烦！！</p><p><img src="/ubuntu/3.png" alt="3"></p><p>然后新建简单卷</p><p><img src="/ubuntu/21.png"></p><p>想给多大空间自己给，建议100G以上，我给了300G</p><p><img src="/ubuntu/22.png"></p><p>一路enter</p><p><img src="/ubuntu/23.png"></p><p><img src="/ubuntu/24.png"></p><p>最后要和下图一样</p><p><img src="/ubuntu/33.png"></p><h2><span id="2将ubuntu镜像塞到启动盘里面制成系统盘">2.将ubuntu镜像塞到启动盘里面制成系统盘</span></h2><p>将准备好的u盘插在电脑上，打开刚刚下载的rufus</p><p><img src="/ubuntu/4.png" alt="4"></p><p><img src="/ubuntu/5.png"></p><p><img src="/ubuntu/6.png"></p><h2><span id="3进入ubuntu系统">3.进入ubuntu系统</span></h2><p>通过BIOS进入系统盘。<br>首先：要知道自己电脑的型号，如：联想、华硕、神州等。<br>再者：上网查找自己电脑进入BIOS：如：联想电脑如何进入BIOS（注意：有的电脑品牌，笔记本和台式机进入BIOS的方式不一样，如联想台式进入BIOS按F1，笔记本是按Fn+F2，如果找不到就瞎几把按,从F1按到F12）。<br>之后：关闭电脑，在开机界面出来时，一直连续点击进入BIOS的快捷键。<br>进入BIOS后：将”安全启动“关闭，另外，将u盘设置为开机启动项（启动项哪里，可能会出现ubuntu或usb等，将其置顶，保存并退出）；若出现ubuntu，则直接点击enter键即可；若不是，则重新设置开机启动项（换成其他的，总之不会是window那个选项）。</p><p>选择UEFI：xxx这个是U盘</p><p><img src="/ubuntu/25.jpg"></p><p>选择第二个&#x2F;第一个也行</p><p><img src="/ubuntu/sweet/hexo/blog/source/_posts/ubuntu/26.jpg" alt="26"></p><p>然后等待开机</p><h2><span id="4安装ubuntu系统">4.安装ubuntu系统</span></h2><p><img src="/ubuntu/7.png"></p><p>中文也行，也可以不改</p><p><img src="/ubuntu/28.png"></p><p><img src="/ubuntu/34.jpg"></p><p>选正常安装也行</p><p><img src="/ubuntu/29.png"></p><p><img src="/ubuntu/30.png"></p><p><img src="/ubuntu/31.png"></p><p>千万别弄错地方了，不然你将损失你那个盘里的所有东西</p><p><img src="/ubuntu/32.png"></p><p><img src="/ubuntu/14.png"></p><p><img src="/ubuntu/15.png"></p><p>接下来命名用户名字（用英文（好像也用不了中文））密码设简单的，不然你会后悔的</p><p>然后等待安装完毕，重启电脑，即可进入ubuntu系统</p>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
